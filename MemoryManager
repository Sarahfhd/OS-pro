package memorysimulation;

import java.util.ArrayList;
import java.util.List;

public class MemoryManager {
    private List<MemoryBlock> memoryBlocks = new ArrayList<>();

    public void initializeMemory(int totalSize, int numBlocks) {
        memoryBlocks.clear();

        int[] blockSizes = {300, 270, 219, 61, 150}; // Assign sizes for each block manually based on assignment output
        int start = 0;

        for (int i = 0; i < numBlocks; i++) {
            int end = start + blockSizes[i] - 1;
            memoryBlocks.add(new MemoryBlock(start, end));
            start = end + 1;
        }
    }

    public boolean allocateMemory(int size, int strategy) {
        MemoryBlock selectedBlock = null;

        if (strategy == 1) { // First-fit
            for (MemoryBlock block : memoryBlocks) {
                if (block.isFree && block.getSize() >= size) {
                    selectedBlock = block;
                    break;
                }
            }
        } else if (strategy == 2) { // Best-fit
            int minDiff = Integer.MAX_VALUE;
            for (MemoryBlock block : memoryBlocks) {
                if (block.isFree && block.getSize() >= size && block.getSize() - size < minDiff) {
                    minDiff = block.getSize() - size;
                    selectedBlock = block;
                }
            }
        } else if (strategy == 3) { // Worst-fit
            int maxDiff = -1;
            for (MemoryBlock block : memoryBlocks) {
                if (block.isFree && block.getSize() >= size && block.getSize() - size > maxDiff) {
                    maxDiff = block.getSize() - size;
                    selectedBlock = block;
                }
            }
        }

        if (selectedBlock != null) {
            selectedBlock.isFree = false;
            System.out.println("Allocated at address: " + selectedBlock.start);
            return true;
        } else {
            System.out.println("Allocation failed. No suitable block found.");
            return false;
        }
    }

    public void printMemoryStatus() {
        int externalFragmentation = 0;
        System.out.println("====================================");
        System.out.println("Memory blocks:");
        System.out.println("====================================");
        System.out.println("Block#      start-end       status");
        System.out.println("====================================");

        for (int i = 0; i < memoryBlocks.size(); i++) {
            MemoryBlock block = memoryBlocks.get(i);
            System.out.printf("Block%-6d %-15s %-10s\n",
                    i,
                    block.start + "-" + block.end,
                    block.isFree ? "free" : "allocated");
            if (block.isFree) {
                externalFragmentation += block.getSize();
            }
        }

        System.out.println("====================================");
        System.out.println("External Fragmentation: " + externalFragmentation + " bytes");
    }
}

